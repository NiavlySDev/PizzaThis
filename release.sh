#!/bin/bash

# Script de release automatique pour Pizza This
# Usage: ./release.sh (interface interactive)

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
echo_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
echo_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
echo_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
echo_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Configuration
REPO_OWNER="NiavlySDev"
REPO_NAME="PizzaThis"
VERSION_FILE="version.json"
CHANGELOG_FILE="CHANGELOG.md"

# Fonction pour incr√©menter la version
increment_version() {
    local version=$1
    local type=$2
    
    # S√©parer les parties de la version
    IFS='.' read -ra VERSION_PARTS <<< "$version"
    major=${VERSION_PARTS[0]}
    minor=${VERSION_PARTS[1]}
    patch=${VERSION_PARTS[2]}
    
    case $type in
        "major")
            # major: v0.1.2 ‚Üí v0.2.0 (incr√©mente minor, reset patch)
            minor=$((minor + 1))
            patch=0
            ;;
        "minor")
            # minor: v0.1.9 ‚Üí v0.1.10 (incr√©mente patch)
            patch=$((patch + 1))
            ;;
        "patch"|*)
            # patch: v0.1.9 ‚Üí v0.1.10 (incr√©mente patch - m√™me comportement que minor)
            patch=$((patch + 1))
            ;;
    esac
    
    echo "${major}.${minor}.${patch}"
}

# V√©rifier si on est dans un repo git
if [ ! -d ".git" ]; then
    echo_error "Ce script doit √™tre ex√©cut√© dans un d√©p√¥t git"
    exit 1
fi

# V√©rifier si GitHub CLI est install√©
if ! command -v gh &> /dev/null; then
    echo_error "GitHub CLI (gh) n'est pas install√©. Installez-le avec: sudo apt install gh"
    echo_info "Ou visitez: https://cli.github.com/"
    exit 1
fi

# V√©rifier l'authentification GitHub
if ! gh auth status &> /dev/null; then
    echo_error "Vous devez vous authentifier avec GitHub CLI"
    echo_info "Ex√©cutez: gh auth login"
    exit 1
fi

# Cr√©er le fichier de version s'il n'existe pas
if [ ! -f "$VERSION_FILE" ]; then
    echo_info "Cr√©ation du fichier de version initial..."
    cat > "$VERSION_FILE" << EOF
{
  "version": "0.1.7",
  "build": "$(date +%Y%m%d%H%M%S)",
  "date": "$(date -Iseconds)"
}
EOF
    echo_success "Fichier de version cr√©√©: v0.1.5"
fi

# Lire la version actuelle (sans d√©pendance jq)
current_version=$(grep '"version"' "$VERSION_FILE" | sed 's/.*"version":[[:space:]]*"\([^"]*\)".*/\1/')
echo_info "Version actuelle: v$current_version"

# Interface utilisateur interactive
clear
echo "üçï Pizza This - Syst√®me de Release Automatique"
echo "=============================================="
echo
echo "Version actuelle: v$current_version"
echo

# Menu de s√©lection du type de release
echo "üìã Choisissez le type de release:"
echo "  1) Patch    - Corrections et petites am√©liorations  (v$current_version ‚Üí v$(increment_version "$current_version" "patch"))"
echo "  2) Minor    - Nouvelles fonctionnalit√©s            (v$current_version ‚Üí v$(increment_version "$current_version" "minor"))"
echo "  3) Major    - Version importante                   (v$current_version ‚Üí v$(increment_version "$current_version" "major"))"
echo "  4) Annuler"
echo

# Lecture du choix utilisateur
while true; do
    read -p "Votre choix (1-4): " choice
    case $choice in
        1)
            increment_type="patch"
            type_description="Patch - Corrections et petites am√©liorations"
            break
            ;;
        2)
            increment_type="minor"
            type_description="Minor - Nouvelles fonctionnalit√©s"
            break
            ;;
        3)
            increment_type="major"
            type_description="Major - Version importante"
            break
            ;;
        4)
            echo_warning "Release annul√©e par l'utilisateur"
            exit 0
            ;;
        *)
            echo_error "Choix invalide. Veuillez choisir 1, 2, 3 ou 4."
            ;;
    esac
done

# Calculer la nouvelle version pour l'affichage
new_version_preview=$(increment_version "$current_version" "$increment_type")
echo
echo_success "Type s√©lectionn√©: $type_description"
echo_info "Version qui sera cr√©√©e: v$new_version_preview"
echo

# Demander le message de release
echo "üìù Message de release:"
echo "  D√©crivez bri√®vement les changements de cette version"
echo "  (Laissez vide pour un message automatique)"
echo
read -p "Message: " release_message

# Message par d√©faut si vide
if [ -z "$release_message" ]; then
    case $increment_type in
        "patch")
            release_message="Corrections de bugs et optimisations diverses"
            ;;
        "minor")
            release_message="Nouvelles fonctionnalit√©s et am√©liorations"
            ;;
        "major")
            release_message="Version importante avec nouvelles fonctionnalit√©s majeures"
            ;;
    esac
fi

echo
echo_info "Message de release: $release_message"
echo

# Confirmation finale
echo "üîç R√©capitulatif de la release:"
echo "  ‚Ä¢ Version actuelle: v$current_version"
echo "  ‚Ä¢ Nouvelle version: v$new_version_preview"
echo "  ‚Ä¢ Type: $type_description"
echo "  ‚Ä¢ Message: $release_message"
echo

read -p "Confirmer la cr√©ation de cette release? (y/N): " confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    echo_warning "Release annul√©e par l'utilisateur"
    exit 0
fi

echo
echo_success "D√©marrage de la cr√©ation de la release v$new_version_preview..."
echo

# Calculer la nouvelle version finale
new_version=$(increment_version "$current_version" "$increment_type")

# V√©rifier s'il y a des changements √† commiter
if [ -n "$(git status --porcelain)" ]; then
    echo_warning "Il y a des changements non committes. Ajout automatique..."
    git add .
    git commit -m "Pr√©paration release v$new_version"
    echo_success "Changements committes"
fi

# Mettre √† jour le fichier de version
echo_info "Mise √† jour du fichier de version..."
cat > "$VERSION_FILE" << EOF
{
  "version": "$new_version",
  "build": "$(date +%Y%m%d%H%M%S)",
  "date": "$(date -Iseconds)",
  "previous_version": "$current_version"
}
EOF

# Mettre √† jour ou cr√©er le CHANGELOG
echo_info "Mise √† jour du changelog..."
if [ ! -f "$CHANGELOG_FILE" ]; then
    cat > "$CHANGELOG_FILE" << EOF
# Changelog - Pizza This

Toutes les modifications notables de ce projet seront document√©es dans ce fichier.

## [v$new_version] - $(date +%Y-%m-%d)

### üéâ Nouvelles fonctionnalit√©s
- $release_message

### üîß Am√©liorations
- Interface utilisateur moderne et responsive
- Syst√®me d'authentification avec base de donn√©es
- Integration Discord pour notifications
- Panel d'administration complet

### üêõ Corrections
- Optimisations diverses et corrections de bugs

---

## [v$current_version] - Version pr√©c√©dente
- Version pr√©c√©dente du syst√®me
EOF
else
    # Ajouter la nouvelle version en haut du changelog existant
    temp_file=$(mktemp)
    cat > "$temp_file" << EOF
# Changelog - Pizza This

Toutes les modifications notables de ce projet seront document√©es dans ce fichier.

## [v$new_version] - $(date +%Y-%m-%d)

### üéâ Nouvelles fonctionnalit√©s
- $release_message

### üîß Am√©liorations
- Interface utilisateur moderne et responsive
- Syst√®me d'authentification avec base de donn√©es
- Integration Discord pour notifications
- Panel d'administration complet

### üêõ Corrections
- Optimisations diverses et corrections de bugs

---

EOF
    tail -n +4 "$CHANGELOG_FILE" >> "$temp_file"
    mv "$temp_file" "$CHANGELOG_FILE"
fi

# Mettre √† jour le README avec la nouvelle version
echo_info "Mise √† jour du README..."
if [ -f "README.md" ]; then
    sed -i "s/Version: v[0-9]\+\.[0-9]\+\.[0-9]\+/Version: v$new_version/g" README.md
    sed -i "s/version [0-9]\+\.[0-9]\+\.[0-9]\+/version $new_version/g" README.md
fi

# Ajouter les fichiers modifi√©s
git add "$VERSION_FILE" "$CHANGELOG_FILE" "README.md"

# Cr√©er le commit de release
echo_info "Cr√©ation du commit de release..."
git commit -m "üöÄ Release v$new_version

- $release_message
- Mise √† jour automatique de la version
- Changelog mis √† jour
- Build: $(date +%Y%m%d%H%M%S)"

echo_success "Commit de release cr√©√©"

# Cr√©er le tag
echo_info "Cr√©ation du tag v$new_version..."
git tag -a "v$new_version" -m "Release v$new_version

$release_message

Date: $(date)
Build: $(date +%Y%m%d%H%M%S)

Changements principaux:
- Interface utilisateur am√©lior√©e
- Syst√®me d'authentification complet
- Base de donn√©es int√©gr√©e
- Panel d'administration
- Notifications Discord"

echo_success "Tag v$new_version cr√©√©"

# Pousser vers GitHub
echo_info "Push vers GitHub..."
git push origin master
git push origin "v$new_version"
echo_success "Code et tags pouss√©s vers GitHub"

# Cr√©er la pr√©-release sur GitHub
echo_info "Cr√©ation de la pr√©-release sur GitHub..."

# Pr√©parer les notes de release
release_notes="## üçï Pizza This v$new_version

$release_message

### üìã Changelog

#### üéâ Nouvelles fonctionnalit√©s
- Interface utilisateur moderne et responsive
- Syst√®me d'authentification avec base de donn√©es MySQL
- Gestion des utilisateurs avec ID Roleplay
- Page de conditions d'utilisation compl√®te
- Affichage d√©taill√© de l'utilisateur connect√© dans le header

#### üîß Am√©liorations techniques
- API RESTful en PHP pour toutes les fonctionnalit√©s
- Base de donn√©es MySQL avec tables optimis√©es
- Syst√®me de tokens JWT pour l'authentification
- Integration Discord pour les notifications de contact/r√©servation
- Panel d'administration avec statistiques temps r√©el

#### üé® Design et UX
- Interface moderne avec animations fluides
- Design responsive pour mobile et desktop
- Formulaires optimis√©s avec validation c√¥t√© client et serveur
- Onglets d'authentification avec design am√©lior√©

#### üîê S√©curit√©
- Hachage s√©curis√© des mots de passe
- Validation stricte des donn√©es utilisateur
- Protection contre les injections SQL
- Gestion des sessions s√©curis√©e

### üöÄ Installation

1. Clonez le repository
2. Configurez la base de donn√©es avec \`api/setup.php\`
3. Utilisez les comptes de test:
   - **Admin**: 99999 / admin123
   - **Client**: 12345 / client123

### üìä Statistiques

- **Fichiers modifi√©s**: $(git diff --name-only HEAD~1 HEAD | wc -l)
- **Lignes ajout√©es**: $(git diff --stat HEAD~1 HEAD | tail -n 1 | grep -o '[0-9]* insertion' | grep -o '[0-9]*' || echo '0')
- **Build**: $(date +%Y%m%d%H%M%S)
- **Date**: $(date)

---

**üîó Liens utiles:**
- [Documentation](./README.md)
- [Changelog complet](./CHANGELOG.md)
- [Conditions d'utilisation](./pages/conditions.html)"

# Cr√©er la pr√©-release
gh release create "v$new_version" \
    --title "üçï Pizza This v$new_version" \
    --notes "$release_notes" \
    --prerelease \
    --target master

echo_success "Pr√©-release v$new_version cr√©√©e sur GitHub!"

# R√©sum√© final
echo
echo_success "üéâ Release v$new_version termin√©e avec succ√®s!"
echo
echo_info "üìä R√©sum√©:"
echo "  ‚Ä¢ Version: $current_version ‚Üí $new_version"
echo "  ‚Ä¢ Type: $increment_type"
echo "  ‚Ä¢ Commit: $(git rev-parse --short HEAD)"
echo "  ‚Ä¢ Tag: v$new_version"
echo "  ‚Ä¢ Release: https://github.com/$REPO_OWNER/$REPO_NAME/releases/tag/v$new_version"
echo
echo_info "üîó Liens utiles:"
echo "  ‚Ä¢ Repository: https://github.com/$REPO_OWNER/$REPO_NAME"
echo "  ‚Ä¢ Releases: https://github.com/$REPO_OWNER/$REPO_NAME/releases"
echo "  ‚Ä¢ Issues: https://github.com/$REPO_OWNER/$REPO_NAME/issues"
echo
echo_warning "üí° Pour la prochaine release, utilisez:"
echo "  ‚Ä¢ ./release.sh patch \"Corrections\"             # v$new_version ‚Üí v$(increment_version "$new_version" "patch") (incr√©mente patch)"
echo "  ‚Ä¢ ./release.sh minor \"Nouvelles fonctionnalit√©s\" # v$new_version ‚Üí v$(increment_version "$new_version" "minor") (incr√©mente patch)"
echo "  ‚Ä¢ ./release.sh major \"Version importante\"      # v$new_version ‚Üí v$(increment_version "$new_version" "major") (incr√©mente minor, reset patch)"
echo
